	{
    "key": "alt+r",
    "command": "jump-and-select.jumpForwardOnly",
    "args": {
      "text": "mark"
    }
  }

	let commandDisposable1 = vscode.commands.registerCommand('jump-and-select.jumpForwardOnly', (arg) => {
		// console.log(`arg from keybinding = ${arg.text}`);  // works from keybinding
		commands.jumpForward(restrict, after);  <== add an arg parameter here and above
	});

	----------------------------------------------------------------------------------------------------
																																	PASTE

	exports.jumpForward = function (restrict, after) {

		// arg === { text: "a" }

		// let typeDisposable7 = vscode.commands.registerCommand('paste', arg => {
		// 	console.log(arg);   // works, and can do 'type' as well
		// });

		let typeDisposable = vscode.commands.registerCommand('type', arg => {
		}
	}

	---------------------------------------------------------------------------------------------------------

	{
    "key": "alt+r",
    "command": "extension.multiCommand.execute",
    "args": {
			// "interval": 500,
      "sequence": [
        "jump-and-select.jumpForwardSelect",
        {
          "command": "type",
          "args": {
            "text": "mark"   // works !!!!
          }
        }
      ]
    },
  }

	{
    "key": "alt+r",
    "command": "extension.multiCommand.execute",
    "args": {
			"interval": 500,
      "sequence": [
				{
				  "command": "editor.action.insertSnippet",
    			"args": {
        		"snippet": "${CLIPBOARD/([a-z]*)([A-Z])(.*)/$1$2/g}"
					}
				},
        "jump-and-select.jumpBackwardOnly",
        {
          "command": "type",
          "args": {
            "text": "b"  // or multiple characters works too
          }
        }
      ]
    },
  }

	-----------------------------------------------------------------------------------------------

  // so can use an actual regex in a keybinding
	// indexOf can use multiple characters just need to consider the length

	// consider a select next/previous occurrence command (if multiple characters)

	----------------------------------------------------------------------------------------------

	A new command to keep running and terminate on Return ?

	Setting to never show infoMessage ?

	A StatusBarItem ?  vscode.window.createStatusBarItem(alignment?: StatusBarAlignment, priority?: number): StatusBarItem

	A setting to disable the StatusBarItem ?

	----------------------------------------------------------------------------
			// let showMessage = 'true';  // global
			if (showMessage !== 'never') showMessage = 'true';

		// if (showMessage === 'true') vscode.window
    //     .showInformationMessage("Press Return to exit jump command.",
    //       ...['Okay, show next time.', 'Don\'t show again.'])   // two buttons
    //     .then(selected => {
		// 			if (selected === 'Okay, show next time.') showMessage = 'false';
		// 			else showMessage = 'never';
    //     });

--------------------------------------------------------------------------

		// don't show the statusBarItem if command from keybinding

		// if (statusBarItemNotShowing) {
		// 	sbItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 1);
		// 	sbItem.text = "'Return' to exit jump";
		// 	sbItem.tooltip = "Pressing 'Return' will exit the current jump command";
		// 	sbItem.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');
		// 	sbItem.show();
		// 	statusBarItemNotShowing = false;
		// }

		/** @type { vscode.StatusBarItem } */
		// let sbItem;
		// let statusBarItemNotShowing = true;

		if (arg.text === '\n') {         // on Enter, exit

			// sbItem.dispose();
			// statusBarItemNotShowing = true;
			typeDisposable.dispose();
			return;
		}

